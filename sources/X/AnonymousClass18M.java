package X;

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import com.whatsapp.util.Log;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Iterator;

/* renamed from: X.18M  reason: invalid class name */
public final class AnonymousClass18M extends C229616q {
    public C234918r A00;
    public final C19970wo A01;
    public final AnonymousClass11g A02;
    public final AnonymousClass12S A03;
    public final boolean A04 = true;

    /* JADX INFO: super call moved to the top of the method (can break code semantics) */
    public AnonymousClass18M(C19700wN r5, C19970wo r6, C19630wG r7, AnonymousClass11g r8, AnonymousClass12S r9) {
        super(r7.A00, r5, "axolotl.db", 17);
        AnonymousClass00C.A0D(r7, 1);
        AnonymousClass00C.A0D(r6, 2);
        AnonymousClass00C.A0D(r5, 3);
        AnonymousClass00C.A0D(r9, 4);
        AnonymousClass00C.A0D(r8, 5);
        this.A01 = r6;
        this.A03 = r9;
        this.A02 = r8;
    }

    public void onCreate(SQLiteDatabase sQLiteDatabase) {
        C234918r r0;
        SQLiteDatabase sQLiteDatabase2 = sQLiteDatabase;
        AnonymousClass00C.A0D(sQLiteDatabase2, 0);
        Log.i("creating axolotl database version 17");
        sQLiteDatabase2.execSQL("CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, recipient_type INTEGER NOT NULL DEFAULT 0, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER, recipient_lid_identifier INTEGER)");
        sQLiteDatabase2.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
        sQLiteDatabase2.execSQL("CREATE INDEX IF NOT EXISTS identities_lid_identifier_idx ON identities (recipient_lid_identifier, device_id)");
        sQLiteDatabase2.execSQL("CREATE TABLE prekeys (_id INTEGER PRIMARY KEY AUTOINCREMENT, prekey_id INTEGER UNIQUE, sent_to_server BOOLEAN, record BLOB, direct_distribution BOOLEAN, upload_timestamp INTEGER)");
        sQLiteDatabase2.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER)");
        sQLiteDatabase2.execSQL("CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, recipient_type INTEGER NOT NULL DEFAULT 0, device_id INTEGER, record BLOB, timestamp INTEGER, recipient_lid_identifier INTEGER)");
        sQLiteDatabase2.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, recipient_type, device_id )");
        sQLiteDatabase2.execSQL("CREATE INDEX IF NOT EXISTS sessions_lid_identifier_idx ON sessions (recipient_lid_identifier, device_id )");
        sQLiteDatabase2.execSQL("CREATE TABLE signed_prekeys (_id INTEGER PRIMARY KEY AUTOINCREMENT, prekey_id INTEGER UNIQUE, timestamp INTEGER, record  BLOB)");
        sQLiteDatabase2.execSQL("CREATE TABLE message_base_key (_id INTEGER PRIMARY KEY AUTOINCREMENT, msg_key_remote_jid TEXT NOT NULL, msg_key_from_me BOOLEAN NOT NULL, msg_key_id TEXT NOT NULL, recipient_id INTEGER, recipient_type INTEGER NOT NULL DEFAULT 0, device_id INTEGER NOT NULL DEFAULT 0, last_alice_base_key BLOB NOT NULL, timestamp INTEGER, recipient_lid_identifier INTEGER)");
        sQLiteDatabase2.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
        sQLiteDatabase2.execSQL("CREATE INDEX IF NOT EXISTS message_base_key_lid_identifier_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_lid_identifier, device_id)");
        sQLiteDatabase2.execSQL("CREATE TABLE sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id INTEGER NOT NULL, sender_type INTEGER NOT NULL DEFAULT 0, device_id INTEGER NOT NULL DEFAULT 0, record BLOB NOT NULL, timestamp INTEGER, sender_lid_identifier INTEGER)");
        sQLiteDatabase2.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, sender_type, device_id)");
        sQLiteDatabase2.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_lid_identifier_idx ON sender_keys (group_id, sender_lid_identifier, device_id)");
        sQLiteDatabase2.execSQL("CREATE TABLE fast_ratchet_sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id  INTEGER NOT NULL, sender_type INTEGER NOT NULL DEFAULT 0, device_id INTEGER NOT NULL DEFAULT 0, record BLOB NOT NULL, sender_lid_identifier INTEGER)");
        sQLiteDatabase2.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
        sQLiteDatabase2.execSQL("CREATE INDEX IF NOT EXISTS fast_ratchet_sender_keys_lid_identifier_idx ON fast_ratchet_sender_keys (group_id, sender_lid_identifier, device_id)");
        sQLiteDatabase2.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
        sQLiteDatabase2.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
        sQLiteDatabase2.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
        Log.i("created axolotl database version 17");
        if (this.A04 && (r0 = this.A00) != null) {
            AnonymousClass189 r3 = r0.A00;
            long A002 = C19970wo.A00(r3.A0D) / 1000;
            C119545pz A003 = C133256Xm.A00();
            AnonymousClass34P r1 = new AnonymousClass34P(A003.A00, new AnonymousClass3FZ(A003.A01));
            C234318l r12 = r3.A07;
            byte[] A004 = r1.A01.A00.A00();
            AnonymousClass00C.A08(A004);
            AnonymousClass66J r2 = r1.A00;
            byte[] bArr = r2.A01;
            AnonymousClass00C.A08(bArr);
            try {
                int nextInt = SecureRandom.getInstance("SHA1PRNG").nextInt(2147483646) + 1;
                ContentValues contentValues = new ContentValues();
                contentValues.put("recipient_id", -1);
                contentValues.put("recipient_type", 0);
                contentValues.put("device_id", 0);
                contentValues.put("registration_id", Integer.valueOf(nextInt));
                contentValues.put("public_key", A004);
                contentValues.put("private_key", bArr);
                try {
                    contentValues.put("next_prekey_id", Integer.valueOf(SecureRandom.getInstance("SHA1PRNG").nextInt(16777214) + 1));
                    Long valueOf = Long.valueOf(A002);
                    contentValues.put("timestamp", valueOf);
                    if (C20800yB.A01(C21000yV.A02, r12.A03.A03, 6542)) {
                        contentValues.put("recipient_lid_identifier", -1);
                    }
                    sQLiteDatabase2.insertOrThrow("identities", (String) null, contentValues);
                    Log.i("axolotl inserted identity key pair");
                    r12.A01 = new C593533p(A004, bArr);
                    r12.A00 = nextInt;
                    C235218u r9 = r3.A00;
                    try {
                        C119545pz A005 = C133256Xm.A00();
                        AnonymousClass3IG r13 = A005.A01;
                        byte[] A08 = C133256Xm.A08(r2, r13.A00());
                        C99774tw r22 = (C99774tw) C100004uJ.DEFAULT_INSTANCE.A0p();
                        r22.A0U(0);
                        byte[] A006 = r13.A00();
                        r22.A0X(C21674AUx.A01(A006, 0, A006.length));
                        byte[] bArr2 = A005.A00.A01;
                        r22.A0W(C21674AUx.A01(bArr2, 0, bArr2.length));
                        r22.A0Y(C21674AUx.A01(A08, 0, A08.length));
                        r22.A0V(C19970wo.A00(r9.A03));
                        byte[] A0o = r22.A0R().A0o();
                        ContentValues contentValues2 = new ContentValues();
                        contentValues2.put("prekey_id", 0);
                        contentValues2.put("timestamp", valueOf);
                        contentValues2.put("record", A0o);
                        sQLiteDatabase2.insertOrThrow("signed_prekeys", (String) null, contentValues2);
                        Log.i("axolotl inserted signed prekey");
                        AnonymousClass187 r23 = r3.A0J;
                        r23.A00.submit(new C35691j6(r3, 28));
                        r3.A0F.A26(true);
                        Iterator it = r3.A0I.getObservers().iterator();
                        if (it.hasNext()) {
                            it.next();
                            throw new NullPointerException("onSignalStoreCreated");
                        }
                    } catch (AnonymousClass110 e) {
                        throw new RuntimeException(e);
                    }
                } catch (NoSuchAlgorithmException e2) {
                    throw new AssertionError(e2);
                }
            } catch (NoSuchAlgorithmException e3) {
                throw new AssertionError(e3);
            }
        }
    }

    public void onUpgrade(SQLiteDatabase sQLiteDatabase, int i, int i2) {
        AnonymousClass00C.A0D(sQLiteDatabase, 0);
        StringBuilder sb = new StringBuilder();
        sb.append("axolotl upgrading db from ");
        sb.append(i);
        sb.append(" to ");
        sb.append(i2);
        Log.i(sb.toString());
        if (i2 == 17) {
            long A002 = C19970wo.A00(this.A01) / ((long) 1000);
            if (i <= 1) {
                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN timestamp INTEGER");
                ContentValues contentValues = new ContentValues();
                contentValues.put("timestamp", Long.valueOf(A002));
                sQLiteDatabase.update("sessions", contentValues, (String) null, (String[]) null);
            } else if (i > 2) {
                if (i > 4) {
                    if (i > 5) {
                        if (i > 6) {
                            if (i > 7) {
                                if (i > 8) {
                                    if (i > 9) {
                                        if (i > 10) {
                                            if (i > 11) {
                                                if (i > 12) {
                                                    if (i > 13) {
                                                        if (i > 15) {
                                                            if (i > 16) {
                                                                return;
                                                            }
                                                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS fast_ratchet_sender_keys_lid_identifier_idx ON fast_ratchet_sender_keys (group_id, sender_lid_identifier, device_id)");
                                                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS identities_lid_identifier_idx ON identities (recipient_lid_identifier, device_id)");
                                                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS message_base_key_lid_identifier_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_lid_identifier, device_id)");
                                                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_lid_identifier_idx ON sender_keys (group_id, sender_lid_identifier, device_id)");
                                                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_lid_identifier_idx ON sessions (recipient_lid_identifier, device_id )");
                                                            return;
                                                        }
                                                        sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                                                        sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_lid_identifier INTEGER");
                                                        sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_lid_identifier INTEGER");
                                                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                                                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_lid_identifier INTEGER");
                                                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS fast_ratchet_sender_keys_lid_identifier_idx ON fast_ratchet_sender_keys (group_id, sender_lid_identifier, device_id)");
                                                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS identities_lid_identifier_idx ON identities (recipient_lid_identifier, device_id)");
                                                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS message_base_key_lid_identifier_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_lid_identifier, device_id)");
                                                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_lid_identifier_idx ON sender_keys (group_id, sender_lid_identifier, device_id)");
                                                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_lid_identifier_idx ON sessions (recipient_lid_identifier, device_id )");
                                                        return;
                                                    }
                                                    sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                                                    sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                                                    sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_lid_identifier INTEGER");
                                                    sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_lid_identifier INTEGER");
                                                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                                                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_lid_identifier INTEGER");
                                                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS fast_ratchet_sender_keys_lid_identifier_idx ON fast_ratchet_sender_keys (group_id, sender_lid_identifier, device_id)");
                                                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS identities_lid_identifier_idx ON identities (recipient_lid_identifier, device_id)");
                                                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS message_base_key_lid_identifier_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_lid_identifier, device_id)");
                                                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_lid_identifier_idx ON sender_keys (group_id, sender_lid_identifier, device_id)");
                                                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_lid_identifier_idx ON sessions (recipient_lid_identifier, device_id )");
                                                    return;
                                                }
                                                sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                                                sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                                                sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                                                sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_lid_identifier INTEGER");
                                                sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_lid_identifier INTEGER");
                                                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                                                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_lid_identifier INTEGER");
                                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS fast_ratchet_sender_keys_lid_identifier_idx ON fast_ratchet_sender_keys (group_id, sender_lid_identifier, device_id)");
                                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS identities_lid_identifier_idx ON identities (recipient_lid_identifier, device_id)");
                                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS message_base_key_lid_identifier_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_lid_identifier, device_id)");
                                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_lid_identifier_idx ON sender_keys (group_id, sender_lid_identifier, device_id)");
                                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_lid_identifier_idx ON sessions (recipient_lid_identifier, device_id )");
                                                return;
                                            }
                                            sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                                            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, recipient_type, device_id )");
                                            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, sender_type, device_id)");
                                            sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                                            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                                            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                                            sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                                            sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_lid_identifier INTEGER");
                                            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_lid_identifier INTEGER");
                                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                                            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_lid_identifier INTEGER");
                                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS fast_ratchet_sender_keys_lid_identifier_idx ON fast_ratchet_sender_keys (group_id, sender_lid_identifier, device_id)");
                                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS identities_lid_identifier_idx ON identities (recipient_lid_identifier, device_id)");
                                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS message_base_key_lid_identifier_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_lid_identifier, device_id)");
                                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_lid_identifier_idx ON sender_keys (group_id, sender_lid_identifier, device_id)");
                                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_lid_identifier_idx ON sessions (recipient_lid_identifier, device_id )");
                                            return;
                                        }
                                        A01(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
                                        A00(sQLiteDatabase, "identities");
                                        A01(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
                                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                        A00(sQLiteDatabase, "sessions");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
                                        sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
                                        sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
                                        sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
                                        sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
                                        sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, recipient_type, device_id )");
                                        sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, sender_type, device_id)");
                                        sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                                        sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                                        sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                                        sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                                        sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_lid_identifier INTEGER");
                                        sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_lid_identifier INTEGER");
                                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_lid_identifier INTEGER");
                                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS fast_ratchet_sender_keys_lid_identifier_idx ON fast_ratchet_sender_keys (group_id, sender_lid_identifier, device_id)");
                                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS identities_lid_identifier_idx ON identities (recipient_lid_identifier, device_id)");
                                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS message_base_key_lid_identifier_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_lid_identifier, device_id)");
                                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_lid_identifier_idx ON sender_keys (group_id, sender_lid_identifier, device_id)");
                                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_lid_identifier_idx ON sessions (recipient_lid_identifier, device_id )");
                                        return;
                                    }
                                    sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN upload_timestamp INTEGER");
                                    ContentValues contentValues2 = new ContentValues();
                                    Long valueOf = Long.valueOf(A002);
                                    contentValues2.put("upload_timestamp", valueOf);
                                    sQLiteDatabase.update("prekeys", contentValues2, "sent_to_server != 0", (String[]) null);
                                    sQLiteDatabase.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER)");
                                    ContentValues contentValues3 = new ContentValues();
                                    contentValues3.put("upload_timestamp", valueOf);
                                    sQLiteDatabase.insert("prekey_uploads", (String) null, contentValues3);
                                    A01(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
                                    A00(sQLiteDatabase, "identities");
                                    A01(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
                                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                    A00(sQLiteDatabase, "sessions");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
                                    sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
                                    sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
                                    sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
                                    sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
                                    sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, recipient_type, device_id )");
                                    sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, sender_type, device_id)");
                                    sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                                    sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                                    sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                                    sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                                    sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_lid_identifier INTEGER");
                                    sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_lid_identifier INTEGER");
                                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_lid_identifier INTEGER");
                                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS fast_ratchet_sender_keys_lid_identifier_idx ON fast_ratchet_sender_keys (group_id, sender_lid_identifier, device_id)");
                                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS identities_lid_identifier_idx ON identities (recipient_lid_identifier, device_id)");
                                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS message_base_key_lid_identifier_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_lid_identifier, device_id)");
                                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_lid_identifier_idx ON sender_keys (group_id, sender_lid_identifier, device_id)");
                                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_lid_identifier_idx ON sessions (recipient_lid_identifier, device_id )");
                                    return;
                                }
                                sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN direct_distribution BOOLEAN");
                                ContentValues contentValues4 = new ContentValues();
                                contentValues4.put("direct_distribution", false);
                                sQLiteDatabase.update("prekeys", contentValues4, (String) null, (String[]) null);
                                sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN upload_timestamp INTEGER");
                                ContentValues contentValues22 = new ContentValues();
                                Long valueOf2 = Long.valueOf(A002);
                                contentValues22.put("upload_timestamp", valueOf2);
                                sQLiteDatabase.update("prekeys", contentValues22, "sent_to_server != 0", (String[]) null);
                                sQLiteDatabase.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER)");
                                ContentValues contentValues32 = new ContentValues();
                                contentValues32.put("upload_timestamp", valueOf2);
                                sQLiteDatabase.insert("prekey_uploads", (String) null, contentValues32);
                                A01(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
                                A00(sQLiteDatabase, "identities");
                                A01(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
                                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                A00(sQLiteDatabase, "sessions");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
                                sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
                                sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
                                sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
                                sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
                                sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, recipient_type, device_id )");
                                sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, sender_type, device_id)");
                                sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                                sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                                sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                                sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                                sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_lid_identifier INTEGER");
                                sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_lid_identifier INTEGER");
                                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_lid_identifier INTEGER");
                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS fast_ratchet_sender_keys_lid_identifier_idx ON fast_ratchet_sender_keys (group_id, sender_lid_identifier, device_id)");
                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS identities_lid_identifier_idx ON identities (recipient_lid_identifier, device_id)");
                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS message_base_key_lid_identifier_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_lid_identifier, device_id)");
                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_lid_identifier_idx ON sender_keys (group_id, sender_lid_identifier, device_id)");
                                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_lid_identifier_idx ON sessions (recipient_lid_identifier, device_id )");
                                return;
                            }
                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN timestamp INTEGER");
                            ContentValues contentValues5 = new ContentValues();
                            contentValues5.put("timestamp", Long.valueOf(A002));
                            sQLiteDatabase.update("sender_keys", contentValues5, (String) null, (String[]) null);
                            sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN direct_distribution BOOLEAN");
                            ContentValues contentValues42 = new ContentValues();
                            contentValues42.put("direct_distribution", false);
                            sQLiteDatabase.update("prekeys", contentValues42, (String) null, (String[]) null);
                            sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN upload_timestamp INTEGER");
                            ContentValues contentValues222 = new ContentValues();
                            Long valueOf22 = Long.valueOf(A002);
                            contentValues222.put("upload_timestamp", valueOf22);
                            sQLiteDatabase.update("prekeys", contentValues222, "sent_to_server != 0", (String[]) null);
                            sQLiteDatabase.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER)");
                            ContentValues contentValues322 = new ContentValues();
                            contentValues322.put("upload_timestamp", valueOf22);
                            sQLiteDatabase.insert("prekey_uploads", (String) null, contentValues322);
                            A01(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
                            A00(sQLiteDatabase, "identities");
                            A01(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                            A00(sQLiteDatabase, "sessions");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
                            sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
                            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
                            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
                            sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
                            sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, recipient_type, device_id )");
                            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, sender_type, device_id)");
                            sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                            sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                            sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_lid_identifier INTEGER");
                            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_lid_identifier INTEGER");
                            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_lid_identifier INTEGER");
                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS fast_ratchet_sender_keys_lid_identifier_idx ON fast_ratchet_sender_keys (group_id, sender_lid_identifier, device_id)");
                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS identities_lid_identifier_idx ON identities (recipient_lid_identifier, device_id)");
                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS message_base_key_lid_identifier_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_lid_identifier, device_id)");
                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_lid_identifier_idx ON sender_keys (group_id, sender_lid_identifier, device_id)");
                            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_lid_identifier_idx ON sessions (recipient_lid_identifier, device_id )");
                            return;
                        }
                        C224614k.A01(sQLiteDatabase, "fast_ratchet_sender_keys");
                        sQLiteDatabase.execSQL("CREATE TABLE fast_ratchet_sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id INTEGER NOT NULL, record BLOB NOT NULL)");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id)");
                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN timestamp INTEGER");
                        ContentValues contentValues52 = new ContentValues();
                        contentValues52.put("timestamp", Long.valueOf(A002));
                        sQLiteDatabase.update("sender_keys", contentValues52, (String) null, (String[]) null);
                        sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN direct_distribution BOOLEAN");
                        ContentValues contentValues422 = new ContentValues();
                        contentValues422.put("direct_distribution", false);
                        sQLiteDatabase.update("prekeys", contentValues422, (String) null, (String[]) null);
                        sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN upload_timestamp INTEGER");
                        ContentValues contentValues2222 = new ContentValues();
                        Long valueOf222 = Long.valueOf(A002);
                        contentValues2222.put("upload_timestamp", valueOf222);
                        sQLiteDatabase.update("prekeys", contentValues2222, "sent_to_server != 0", (String[]) null);
                        sQLiteDatabase.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER)");
                        ContentValues contentValues3222 = new ContentValues();
                        contentValues3222.put("upload_timestamp", valueOf222);
                        sQLiteDatabase.insert("prekey_uploads", (String) null, contentValues3222);
                        A01(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
                        A00(sQLiteDatabase, "identities");
                        A01(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                        A00(sQLiteDatabase, "sessions");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
                        sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
                        sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
                        sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
                        sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
                        sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, recipient_type, device_id )");
                        sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, sender_type, device_id)");
                        sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                        sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                        sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                        sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                        sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                        sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                        sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_lid_identifier INTEGER");
                        sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_lid_identifier INTEGER");
                        sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                        sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_lid_identifier INTEGER");
                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS fast_ratchet_sender_keys_lid_identifier_idx ON fast_ratchet_sender_keys (group_id, sender_lid_identifier, device_id)");
                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS identities_lid_identifier_idx ON identities (recipient_lid_identifier, device_id)");
                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS message_base_key_lid_identifier_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_lid_identifier, device_id)");
                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_lid_identifier_idx ON sender_keys (group_id, sender_lid_identifier, device_id)");
                        sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_lid_identifier_idx ON sessions (recipient_lid_identifier, device_id )");
                        return;
                    }
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id)");
                    C224614k.A01(sQLiteDatabase, "fast_ratchet_sender_keys");
                    sQLiteDatabase.execSQL("CREATE TABLE fast_ratchet_sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id INTEGER NOT NULL, record BLOB NOT NULL)");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id)");
                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN timestamp INTEGER");
                    ContentValues contentValues522 = new ContentValues();
                    contentValues522.put("timestamp", Long.valueOf(A002));
                    sQLiteDatabase.update("sender_keys", contentValues522, (String) null, (String[]) null);
                    sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN direct_distribution BOOLEAN");
                    ContentValues contentValues4222 = new ContentValues();
                    contentValues4222.put("direct_distribution", false);
                    sQLiteDatabase.update("prekeys", contentValues4222, (String) null, (String[]) null);
                    sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN upload_timestamp INTEGER");
                    ContentValues contentValues22222 = new ContentValues();
                    Long valueOf2222 = Long.valueOf(A002);
                    contentValues22222.put("upload_timestamp", valueOf2222);
                    sQLiteDatabase.update("prekeys", contentValues22222, "sent_to_server != 0", (String[]) null);
                    sQLiteDatabase.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER)");
                    ContentValues contentValues32222 = new ContentValues();
                    contentValues32222.put("upload_timestamp", valueOf2222);
                    sQLiteDatabase.insert("prekey_uploads", (String) null, contentValues32222);
                    A01(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
                    A00(sQLiteDatabase, "identities");
                    A01(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                    A00(sQLiteDatabase, "sessions");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
                    sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
                    sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
                    sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
                    sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
                    sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, recipient_type, device_id )");
                    sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, sender_type, device_id)");
                    sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                    sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                    sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                    sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                    sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                    sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                    sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_lid_identifier INTEGER");
                    sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_lid_identifier INTEGER");
                    sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                    sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_lid_identifier INTEGER");
                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS fast_ratchet_sender_keys_lid_identifier_idx ON fast_ratchet_sender_keys (group_id, sender_lid_identifier, device_id)");
                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS identities_lid_identifier_idx ON identities (recipient_lid_identifier, device_id)");
                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS message_base_key_lid_identifier_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_lid_identifier, device_id)");
                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_lid_identifier_idx ON sender_keys (group_id, sender_lid_identifier, device_id)");
                    sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_lid_identifier_idx ON sessions (recipient_lid_identifier, device_id )");
                    return;
                }
                C224614k.A01(sQLiteDatabase, "sender_keys");
                sQLiteDatabase.execSQL("CREATE TABLE sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id INTEGER NOT NULL, record BLOB NOT NULL)");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id)");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id)");
                C224614k.A01(sQLiteDatabase, "fast_ratchet_sender_keys");
                sQLiteDatabase.execSQL("CREATE TABLE fast_ratchet_sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id INTEGER NOT NULL, record BLOB NOT NULL)");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id)");
                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN timestamp INTEGER");
                ContentValues contentValues5222 = new ContentValues();
                contentValues5222.put("timestamp", Long.valueOf(A002));
                sQLiteDatabase.update("sender_keys", contentValues5222, (String) null, (String[]) null);
                sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN direct_distribution BOOLEAN");
                ContentValues contentValues42222 = new ContentValues();
                contentValues42222.put("direct_distribution", false);
                sQLiteDatabase.update("prekeys", contentValues42222, (String) null, (String[]) null);
                sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN upload_timestamp INTEGER");
                ContentValues contentValues222222 = new ContentValues();
                Long valueOf22222 = Long.valueOf(A002);
                contentValues222222.put("upload_timestamp", valueOf22222);
                sQLiteDatabase.update("prekeys", contentValues222222, "sent_to_server != 0", (String[]) null);
                sQLiteDatabase.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER)");
                ContentValues contentValues322222 = new ContentValues();
                contentValues322222.put("upload_timestamp", valueOf22222);
                sQLiteDatabase.insert("prekey_uploads", (String) null, contentValues322222);
                A01(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
                A00(sQLiteDatabase, "identities");
                A01(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                A00(sQLiteDatabase, "sessions");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
                sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
                sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
                sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
                sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
                sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, recipient_type, device_id )");
                sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, sender_type, device_id)");
                sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
                sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
                sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
                sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
                sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
                sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_lid_identifier INTEGER");
                sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_lid_identifier INTEGER");
                sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_lid_identifier INTEGER");
                sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_lid_identifier INTEGER");
                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS fast_ratchet_sender_keys_lid_identifier_idx ON fast_ratchet_sender_keys (group_id, sender_lid_identifier, device_id)");
                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS identities_lid_identifier_idx ON identities (recipient_lid_identifier, device_id)");
                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS message_base_key_lid_identifier_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_lid_identifier, device_id)");
                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_lid_identifier_idx ON sender_keys (group_id, sender_lid_identifier, device_id)");
                sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_lid_identifier_idx ON sessions (recipient_lid_identifier, device_id )");
                return;
            }
            sQLiteDatabase.execSQL("CREATE TABLE message_base_key (_id INTEGER PRIMARY KEY AUTOINCREMENT, msg_key_remote_jid TEXT NOT NULL, msg_key_from_me BOOLEAN NOT NULL, msg_key_id TEXT NOT NULL, last_alice_base_key BLOB NOT NULL, timestamp INTEGER)");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id)");
            C224614k.A01(sQLiteDatabase, "sender_keys");
            sQLiteDatabase.execSQL("CREATE TABLE sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id INTEGER NOT NULL, record BLOB NOT NULL)");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id)");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id)");
            C224614k.A01(sQLiteDatabase, "fast_ratchet_sender_keys");
            sQLiteDatabase.execSQL("CREATE TABLE fast_ratchet_sender_keys (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_id TEXT NOT NULL, sender_id INTEGER NOT NULL, record BLOB NOT NULL)");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id)");
            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN timestamp INTEGER");
            ContentValues contentValues52222 = new ContentValues();
            contentValues52222.put("timestamp", Long.valueOf(A002));
            sQLiteDatabase.update("sender_keys", contentValues52222, (String) null, (String[]) null);
            sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN direct_distribution BOOLEAN");
            ContentValues contentValues422222 = new ContentValues();
            contentValues422222.put("direct_distribution", false);
            sQLiteDatabase.update("prekeys", contentValues422222, (String) null, (String[]) null);
            sQLiteDatabase.execSQL("ALTER TABLE prekeys ADD COLUMN upload_timestamp INTEGER");
            ContentValues contentValues2222222 = new ContentValues();
            Long valueOf222222 = Long.valueOf(A002);
            contentValues2222222.put("upload_timestamp", valueOf222222);
            sQLiteDatabase.update("prekeys", contentValues2222222, "sent_to_server != 0", (String[]) null);
            sQLiteDatabase.execSQL("CREATE TABLE prekey_uploads (_id INTEGER PRIMARY KEY AUTOINCREMENT, upload_timestamp INTEGER)");
            ContentValues contentValues3222222 = new ContentValues();
            contentValues3222222.put("upload_timestamp", valueOf222222);
            sQLiteDatabase.insert("prekey_uploads", (String) null, contentValues3222222);
            A01(sQLiteDatabase, "identities", "CREATE TABLE identities (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, registration_id INTEGER, public_key BLOB, private_key BLOB, next_prekey_id INTEGER, timestamp INTEGER)", new String[]{"recipient_id", "registration_id", "public_key", "private_key", "next_prekey_id", "timestamp"});
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, device_id)");
            A00(sQLiteDatabase, "identities");
            A01(sQLiteDatabase, "sessions", "CREATE TABLE sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT, recipient_id INTEGER, device_id INTEGER, record BLOB, timestamp INTEGER)", new String[]{"recipient_id", "record", "timestamp"});
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, device_id)");
            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
            A00(sQLiteDatabase, "sessions");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, device_id)");
            sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, device_id)");
            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_id INTEGER ");
            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN device_id INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("DELETE FROM message_base_key WHERE msg_key_remote_jid NOT GLOB '[0-9]*@s.whatsapp.net'");
            sQLiteDatabase.execSQL("UPDATE message_base_key SET recipient_id = CAST(REPLACE(msg_key_remote_jid, '@s.whatsapp.net', '') AS INTEGER)");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, device_id)");
            sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS identities_idx");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS identities_idx ON identities (recipient_id, recipient_type, device_id)");
            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sessions_idx");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sessions_idx ON sessions (recipient_id, recipient_type, device_id )");
            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_type INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS message_base_key_idx");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS message_base_key_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_id, recipient_type, device_id)");
            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS sender_keys_idx");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS sender_keys_idx ON sender_keys (group_id, sender_id, sender_type, device_id)");
            sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_type INTEGER NOT NULL DEFAULT 0");
            sQLiteDatabase.execSQL("DROP INDEX IF EXISTS fast_ratchet_sender_keys_idx");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS fast_ratchet_sender_keys_idx ON fast_ratchet_sender_keys (group_id, sender_id, sender_type, device_id)");
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS decryption_journal (msg_key_id TEXT NOT NULL, sender_id TEXT NOT NULL, device_id TEXT NOT NULL, plain_text BLOB NOT NULL, receive_timestamp INTEGER NOT NULL)");
            sQLiteDatabase.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS decryption_journal_idx ON decryption_journal (msg_key_id, sender_id, device_id)");
            sQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS\n            preacks (\n              _id INTEGER PRIMARY KEY AUTOINCREMENT,\n              ptn BLOB NOT NULL\n            )\n        ");
            sQLiteDatabase.execSQL("ALTER TABLE fast_ratchet_sender_keys ADD COLUMN sender_lid_identifier INTEGER");
            sQLiteDatabase.execSQL("ALTER TABLE identities ADD COLUMN recipient_lid_identifier INTEGER");
            sQLiteDatabase.execSQL("ALTER TABLE message_base_key ADD COLUMN recipient_lid_identifier INTEGER");
            sQLiteDatabase.execSQL("ALTER TABLE sender_keys ADD COLUMN sender_lid_identifier INTEGER");
            sQLiteDatabase.execSQL("ALTER TABLE sessions ADD COLUMN recipient_lid_identifier INTEGER");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS fast_ratchet_sender_keys_lid_identifier_idx ON fast_ratchet_sender_keys (group_id, sender_lid_identifier, device_id)");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS identities_lid_identifier_idx ON identities (recipient_lid_identifier, device_id)");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS message_base_key_lid_identifier_idx ON message_base_key (msg_key_remote_jid, msg_key_from_me, msg_key_id, recipient_lid_identifier, device_id)");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sender_keys_lid_identifier_idx ON sender_keys (group_id, sender_lid_identifier, device_id)");
            sQLiteDatabase.execSQL("CREATE INDEX IF NOT EXISTS sessions_lid_identifier_idx ON sessions (recipient_lid_identifier, device_id )");
            return;
        }
        StringBuilder sb2 = new StringBuilder();
        sb2.append("Unknown upgrade destination version: ");
        sb2.append(i);
        sb2.append(" -> ");
        sb2.append(i2);
        throw new SQLiteException(sb2.toString());
    }

    public static final void A00(SQLiteDatabase sQLiteDatabase, String str) {
        StringBuilder sb = new StringBuilder();
        sb.append("UPDATE ");
        sb.append(str);
        sb.append(" SET ");
        sb.append("device_id");
        sb.append(" = 0");
        sQLiteDatabase.execSQL(sb.toString());
    }

    public static final void A01(SQLiteDatabase sQLiteDatabase, String str, String str2, String[] strArr) {
        StringBuilder sb = new StringBuilder();
        sb.append("ALTER TABLE ");
        sb.append(str);
        sb.append(" RENAME TO old_");
        sb.append(str);
        sb.append(';');
        sQLiteDatabase.execSQL(sb.toString());
        sQLiteDatabase.execSQL(str2);
        String A09 = AnonymousClass02R.A09(",", "", "", strArr);
        StringBuilder sb2 = new StringBuilder();
        sb2.append("INSERT INTO ");
        sb2.append(str);
        sb2.append(" (");
        sb2.append(A09);
        sb2.append(") SELECT ");
        sb2.append(A09);
        sb2.append(" FROM old_");
        sb2.append(str);
        sQLiteDatabase.execSQL(sb2.toString());
        StringBuilder sb3 = new StringBuilder();
        sb3.append("old_");
        sb3.append(str);
        C224614k.A01(sQLiteDatabase, sb3.toString());
    }

    public C224114e A07() {
        try {
            String databaseName = getDatabaseName();
            C224114e A012 = C224014d.A01(super.A02(), this.A02, this.A03, databaseName);
            AnonymousClass00C.A0B(A012);
            return A012;
        } catch (SQLiteException e) {
            Log.e("failed to open axolotl store", e);
            C234918r r0 = this.A00;
            if (r0 != null) {
                r0.A00.A0M();
            }
            String databaseName2 = getDatabaseName();
            C224114e A013 = C224014d.A01(super.A02(), this.A02, this.A03, databaseName2);
            AnonymousClass00C.A0B(A013);
            return A013;
        }
    }
}
